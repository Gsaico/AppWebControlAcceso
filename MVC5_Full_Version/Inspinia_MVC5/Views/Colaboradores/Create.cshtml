@model Inspinia_MVC5.Models.Colaboradores

@{
    ViewBag.Title = "Nuevo";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Colaborador</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("Listado", "Index")
            </li>
            <li class="active">
                <strong>Agregar Nuevo Colaborador</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
			@Html.ActionLink("Regresar a Listado de Colaboradores", "Index", null, new { @class = "btn btn-primary", id = "btnRegresarListadoColaboradores", name = "btnRegresarListadoColaboradores" })
        </div>
    </div>
</div>


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                
                <div class="ibox-title">
                    <h5>Nuevo Colaborador</h5>

                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                        @*<a class="dropdown-toggle" data-toggle="dropdown" href="#">
                    <i class="fa fa-wrench"></i>
                </a>
                <ul class="dropdown-menu dropdown-user">
                    <li>
                        <a href="#">Config option 1</a>
                    </li>
                    <li>
                        <a href="#">Config option 2</a>
                    </li>
                </ul>*@
                        <a class="close-link">
                            <i class="fa fa-times"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">

@using (Html.BeginForm("Create", "Colaboradores", FormMethod.Post, new { enctype = "multipart/form-data", id = "form", role = "form" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.COD_Colaborador, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.COD_Colaborador, new { @class = "form-control", maxlength = "8", onkeypress = "return justNumbers(event);" } )
                @Html.ValidationMessageFor(model => model.COD_Colaborador, "", new { @class = "text-danger" })

                
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.COD_Empresa, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.DropDownList("COD_Empresa", null, htmlAttributes: new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.COD_Empresa, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ID_Area, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.DropDownList("ID_Area", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ID_Area, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ApellidoPaterno, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", maxlength = "100",  style = "text-transform:uppercase;", onkeyup = "javascript:this.value=this.value.toUpperCase();", onkeypress = "return val(event);" })
                @Html.ValidationMessageFor(model => model.ApellidoPaterno, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ApellidoMaterno, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", maxlength = "100", style = "text-transform:uppercase;", onkeyup = "javascript:this.value=this.value.toUpperCase();", onkeypress = "return val(event);" })
                @Html.ValidationMessageFor(model => model.ApellidoMaterno, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Nombres, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Nombres, new { @class = "form-control", maxlength = "100", style = "text-transform:uppercase;", onkeyup = "javascript:this.value=this.value.toUpperCase();", onkeypress = "return val(event);" })
                @Html.ValidationMessageFor(model => model.Nombres, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FechaContratacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.FechaContratacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaContratacion, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FechaIngresoReingreso, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.FechaIngresoReingreso, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaIngresoReingreso, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FechaCese, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.FechaCese, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaCese, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">

                @Html.TextBoxFor(model => model.Direccion, new { @class = "form-control", maxlength = "100", style = "text-transform:uppercase;", onkeyup = "javascript:this.value=this.value.toUpperCase();" })
                @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
            </div>
        </div>
               
        <div class="form-group">         
            @Html.LabelFor(model => model.Foto, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img id="blah" alt="Foto del colaborador" width="280" height="250" />
                <input type="file" name="FotoColaborador" id="imgInp" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Cargo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Cargo, new { @class = "form-control", maxlength = "50", style = "text-transform:uppercase;", onkeyup = "javascript:this.value=this.value.toUpperCase();" })
                @Html.ValidationMessageFor(model => model.Cargo, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
              

                    @Html.CheckBoxFor(model => model.Estado, new { @class = "i-checks", style = "position: absolute; opacity: 0;" })
                    @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
            
            </div>
        </div>
      
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Agregar Nuevo Colaborador" class="btn btn-primary"  id="btnAgregarNuevoColaborador" name = "btnAgregarNuevoColaborador" />
				@Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-white", id="btnCancelar", name = "btnCancelar" })
            </div>
        </div>
    </div>
}

                </div>
            </div>
        </div>
    </div>
 </div>
    
 @section Styles {
    @Styles.Render("~/plugins/awesomeCheckboxStyles")
    @Styles.Render("~/plugins/clockpickerStyles")
    @Styles.Render("~/plugins/dateRangeStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/plugins/switcheryStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/nouiSliderStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/Content/plugins/ionRangeSlider/ionRangeStyles")
    @Styles.Render("~/plugins/imagecropperStyles")
    @Styles.Render("~/Content/plugins/colorpicker/colorpickerStyles")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#blah').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#imgInp").change(function () {
            readURL(this);
        });

        function justNumbers(e) {
            var keynum = window.event ? window.event.keyCode : e.which;
            if ((keynum == 8) || (keynum == 46))
                return true;

            return /\d/.test(String.fromCharCode(keynum));
        }
        function val(e) {
            tecla = (document.all) ? e.keyCode : e.which;
            if (tecla == 8) return true;
            patron = /[A-Za-zñÑ-áéíóúÁÉÍÓÚ\s\t-]/;
            te = String.fromCharCode(tecla);
            return patron.test(te);
        }
   
    
    
     </script>

@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/plugins/validate")

<script type="text/javascript">
        $(document).ready(function () {

            $("#form").validate({
                rules: {
                    password: {
                        required: true,
                        minlength: 3
                    },
                    url: {
                        required: true,
                        url: true
                    },
                    number: {
                        required: true,
                        number: true
                    },
                    COD_Colaborador: {
                        required: true,
                        minlength: 8
                    },
                    max: {
                        required: true,
                        maxlength: 4
                    }
                }
            });

        });
</script>
}
